function InjectusForEach(a,b){var d=[],c=!1;for(element in a)if(d[element]||(c=b(a[element])),c)break}function InjectusName(a){var b=a.name;return b?b:(a=a.toString().match(/^function ([^(]+)/))&&2<=a.length?a[1]:null}Object.create||(Object.create=function(){function a(){}return function(b){if(1!=arguments.length)throw Error("Object.create implementation only accepts one parameter.");a.prototype=b;return new a}}());
function LifeStyleType(){}LifeStyleType.Singleton="singleton";LifeStyleType.Transient="transient";
function Component(){this.LifeStyleType=this.Implementation=this.Interface=null}Component.From=function(a){var b=new Component;b.Interface=a;return b};Component.prototype.ImplementedBy=function(a){this.Implementation=a;return this};Component.prototype.WithLifestyle=function(a){this.LifeStyleType=a;return this};
function InjectusMetrics(){this.Registered=[];this.TotalRegistered=0;this.Resolved=[];this.TotalResolved=0}InjectusMetrics.prototype.Register=function(a){this.Registered[InjectusName(a.Interface)]||(this.TotalRegistered++,this.Registered[this.Registered.length]=a)};InjectusMetrics.prototype.Resolve=function(a){this.TotalResolved++;a=InjectusName(a.Interface);this.Resolved[a]||(this.Resolved[a]={Interface:a,Total:0});this.Resolved[a].Total++};
InjectusMetrics.prototype.PrintLog=function(){window.console&&console.log&&(console.log("------------------------------------------------------------------------------------------------"),console.log("|                                      INJECTUS REPORT                                         |"),console.log("------------------------------------------------------------------------------------------------"),console.log(" -> Registered components: "+this.TotalRegistered),InjectusForEach(this.Registered,
function(a){console.log("      -Interface: "+InjectusName(a.Interface)+" implemented by "+InjectusName(a.Implementation))}),console.log(" -> Resolved components:"+this.TotalResolved),InjectusForEach(this.Resolved,function(a){console.log("      -Interface: "+a.Interface+" resolved "+a.Total)}),console.log("------------------------------------------------------------------------------------------------"),console.log(" "))};
function IInjectus(){}IInjectus.prototype.GetMetrics=function(){};IInjectus.prototype.Register=function(a){};IInjectus.prototype.Resolve=function(a){};
function Injectus(){this.components=[];this.singletonInstances=[];this.metrics=new InjectusMetrics}Injectus.prototype=Object.create(IInjectus.prototype);Injectus.MaxAllowedDependecies=5;Injectus.instance=null;Injectus.prototype.GetMetrics=function(){return this.metrics};
Injectus.prototype.Register=function(a){if(!(a&&a.Interface&&InjectusName(a.Interface)&&InjectusName(a.Implementation)))throw"Invalid component to register. Reason: null component or Interface property not initialized";var c=InjectusName(a.Interface);if(this.components[c])throw"Component "+c+" already registered";this.components[c]=a;this.metrics.Register(a);if(a.Implementation.Dependencies&&a.Implementation.Dependencies.length>Injectus.MaxAllowedDependecies)throw"Injectus: Object "+InjectusName(a.Implementation)+
" has too much dependencies";};
Injectus.prototype.Resolve=function(a){var c=this;if(!a||!InjectusName(a))throw"Invalid component to resolve";a=InjectusName(a);if(!this.components[a])throw"No component registered for interface "+a;if(this.singletonInstances[a])return this.singletonInstances[a];this.metrics.Resolve(this.components[a]);var d=InjectusName(this.components[a].Implementation),b="new "+d+"(",d=eval(d),e=!1;d.Dependencies&&InjectusForEach(d.Dependencies,function(a){e=!0;if(!c.components[a])throw"Trying to resolve a non Registered dependency: "+a;
b+="Injectus.Resolve("+a+"),"});e&&(b=b.slice(0,-1));b+=")";return this.components[a].LifeStyleType==LifeStyleType.Singleton?(this.singletonInstances[a]=eval(b),this.singletonInstances[a]):eval(b)};Injectus.getInstance=function(){Injectus.instance||(Injectus.instance=new Injectus);return Injectus.instance};Injectus.SetMaxDependenciesNumber=function(a){a>Injectus.MaxAllowedDependecies&&(Injectus.MaxAllowedDependecies=a)};Injectus.GetMetrics=function(){return Injectus.getInstance().GetMetrics()};
Injectus.Register=function(a){Injectus.getInstance().Register(a)};Injectus.Resolve=function(a){return Injectus.getInstance().Resolve(a)};