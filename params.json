{"name":"Injectus JS","tagline":"Dependency Injection Library for JS","body":"InjectusJS\r\n==========\r\n\r\nDependency Injection Library for JS\r\n\r\nHow it works?\r\n\r\n- Fist you should define your classes and interfaces. Remember that in javascript interfaces are simulated.\r\n\r\n  *Define the interface*  \r\n  **function IInterface(){}**  \r\n  \r\n  *Define the class and \"implement\" the interface*  \r\n  **function MyClass(){}**  \r\n  **MyClass.prototype=new IInterface();** *<-- Here we \"implement\"*\r\n  \r\n  \r\n- Let's say  that our \"MyClass\" has two dependecies: ISingletonDependency and ITransientDependency\r\n  \r\n  *Define the ISingletonDependency*  \r\n  **function ISingletonDependency(){}**  \r\n    \r\n  *Define the ITransientDependency*  \r\n  **function ITransientDependency(){}**  \r\n    \r\n  *Implementation for ISingletonDependency*  \r\n  **function SingletonDependency(){}**  \r\n  **SingletonDependency.prototype=new ISingletonDependency();**  \r\n    \r\n  *Implementation for ITransientDependency*  \r\n  **function TransientDependency(){}**  \r\n  **TransientDependency.prototype=new ITransientDependency();**  \r\n    \r\n  *now let's  tell our MyClass that will have two new dependencies:*  \r\n  **MyClass.Dependencies=new Array(\"ISingletonDependency\", \"ITransientDependency\");**\r\n  \r\n    \r\n- Now we've got our Objects defined. All objects have their own interface. Let's register them:\r\n\r\n  *We create a component for an interface and assign an implementation and a life time*  \r\n  **Injectus.Register(Component.From(ISingletonDependency).ImplementedBy(SingletonDependency).WithLifestyle(LifeStyleType.Singleton));**  \r\n  **Injectus.Register(Component.From(ITransientDependency).ImplementedBy(TransientDependency).WithLifestyle(LifeStyleType.Transient));**  \r\n  **Injectus.Register(Component.From(IInterface).ImplementedBy(MyClass).WithLifestyle(LifeStyleType.Transient));**\r\n  \r\n\r\n- Once registered we are ready to use our objects!!\r\n  \r\n  *In order to resolve we'll just need to call Resolve method with the desired \"interface\"*  \r\n  **var myClass=Injectus.Resolve(IInterface);**  \r\n  \r\n- By performing a call to *Injectus.GetMetrics().PrintLog()* it will print into the debugging console of the browser (if exists) a list of registered components and how many times they've been resolved.\r\n  \r\n- For more details. Please have a look to the InjectusJSTest inside /test/lib. There you'll have a nice Jasmine test which will help you to understand how it works\r\n\r\n","google":"UA-38567321-1","note":"Don't delete this file! It's used internally to help with page regeneration."}